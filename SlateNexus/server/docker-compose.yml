version: '3.8'
services:
  postgres:
    image: postgres:latest
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    environment:
      POSTGRES_DB: ${PG_DB}
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASS}
    networks:
      - nexus_network
    ports:
      - "5432:5432"
    volumes:
      - ./initdb:/docker-entrypoint-initdb.d
      - postgres-data:/var/lib/postgresql/data

  nginx:
    image: nginx:latest
    networks:
      nexus_network:
        ipv4_address: 172.20.0.252
    ports:
      - "80:80"
      - "443:443"
    #  - "5000:5000"
    volumes:
      - ../dashboard:/usr/share/nginx/html
    # - ./default.conf:/etc/nginx/conf.d/default.conf
      - ./default.conf.template:/etc/nginx/templates/default.conf.template:ro
      - /etc/ssl/Nexus:/etc/ssl/Nexus
    environment:
      - NEXUS_IP=${NEXUS_IP:-172.17.0.1}
      - NEXUS_FQDN=${NEXUS_FQDN:-_}
      - REMOTELY_FQDN=${REMOTELY_FQDN:-remotely.$NEXUS_FQDN}
    command: /bin/bash -c "envsubst '$${NEXUS_FQDN} $${REMOTELY_FQDN}' < /etc/nginx/templates/default.conf.template > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - authentik-server
      - authentik-worker

  redis:
    image: redis:latest
    networks:
      - nexus_network
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - redis:/data

  authentik-server:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2024.10.5}
    networks:
      nexus_network:
        ipv4_address: 172.20.0.101
    restart: unless-stopped
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgres
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    volumes:
      - ./media:/media
      - ./custom-templates:/templates
    env_file:
      - .env
    # ports:
    #   - "${COMPOSE_PORT_HTTP:-9000}:9000"
    #   - "${COMPOSE_PORT_HTTPS:-9443}:9443"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  authentik-worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2024.10.5}
    networks:
      nexus_network:
        ipv4_address: 172.20.0.100
    restart: unless-stopped
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgres
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      AUTHENTIK_BOOTSTRAP_PASSWORD: ${AK_BT_PASS}
      AUTHENTIK_BOOTSTRAP_TOKEN: ${AK_BT_TOKEN}
      AUTHENTIK_BOOTSTRAP_EMAIL: localhost
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./media:/media
      - ./certs:/certs
      - ./custom-templates:/templates
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  remotely:
    image: immybot/remotely:latest
    networks:
      - nexus_network
    # ports:
    #   - "5000:5000"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_HTTP_PORTS=5000
      - Remotely_ApplicationOptions__DbProvider=SQLite
      - Remotely_ConnectionStrings__SQLite=Data Source=/app/AppData/Remotely.db
      - Remotely_ConnectionStrings__SQLServer=Server=(localdb)\\mssqllocaldb;Database=Remotely-Server-53bc9b9d-9d6a-45d4-8429-2a2761773502;Trusted_Connection=True;MultipleActiveResultSets=true
      - Remotely_ConnectionStrings__PostgreSQL=Server=Host=localhost;Database=Remotely;Username=postgres;
    volumes:
      - /var/www/remotely:/app/AppData

volumes:
  postgres-data:
    driver: local
  redis:
    driver: local

networks:
  nexus_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24